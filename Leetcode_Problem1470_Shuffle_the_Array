/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* shuffle(int* nums, int numsSize, int n, int* returnSize){
    int* ans = (int*)malloc(sizeof(int)*numsSize);
    *returnSize = 0;
    int j = n , i = 0 , idone = 1;
    while(j < numsSize)
    {
        if(idone)
        {
            ans[(*returnSize)++] = nums[i++];
            idone = 0;
        }
        else
        {
            ans[(*returnSize)++] = nums[j++];
            idone = 1;
        }
    }
    return ans;
}


------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* shuffle(int* nums, int numsSize, int n, int* returnSize){
    *returnSize = numsSize;
    for( int i = 1 ; i <  numsSize ; i+= 2)
    {
        int temp = nums[n];
        for(int j = n ; j > i ; j--)
            nums[j] = nums[j-1];
        nums[i] = temp;
        n++;
    }
    return nums;
}


----------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* shuffle(int* nums, int numsSize, int n, int* returnSize){
    *returnSize = numsSize;
    int *ans=malloc(4*(*returnSize)), *start=nums, *end=nums+n;
    for(int i = 0 ; i < numsSize ; i++)
    {
        if(!(i&1))
            ans[i]= *start++;
        else
            ans[i]=*end++;
    }
    return ans;
}
